{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "FPrimePrime",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#modifiers"
        },
        {
            "include": "#severity"
        },
        {
            "include": "#types"
        },
        {
            "include": "#type-builtin-literals"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#tripleString"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#punctuation-comma"
        },
        {
            "include": "#punctuation-semicolon"
        },
        {
            "include": "#punctuation-accessor"
        },
        {
            "include": "#string-character-escape"
        },
        {
            "include": "#numeric-literal"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "storage.type.class.fpp",
                    "match": "\\b(?<![$])(action|always|array|assert|at|base|block|bool|change|choice|command|component|connections|constant|container|cpu|default|do|drop|else|enter|entry|enum|event|exit|format|get|group|guard|health|hook|id|if|import|include|initial|input|instance|interface|internal|locate|machine|match|module|omit|on|opcode|orange|output|packet|packets|param|phase|port|priority|private|product|queue|record|recv|red|ref|reg|request|resp|save|send|serial|set|severity|signal|size|stack|state|string|struct|telemetry|text|throttle|time|topology|type|unmatched|update|with|yellow)\\b"
                }
            ]
        },
        "modifiers": {
            "patterns": [
                {
                    "name": "keyword.control.export.fpp",
                    "match": "\\b(?<![$])(active|async|sync|passive|queued|guarded)\\b"
                }
            ]
        },
        "severity": {
            "patterns": [
                {
                    "name": "keyword.control.trycatch.fpp",
                    "match": "\\b(?<![$])(activity|diagnostic|low|fatal|high|warning)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.primitive.fpp",
                    "match": "\\b(U8|I8|U16|I16|U32|I32|U64|I64|F32|F64|string|bool)\\b"
                }
            ]
        },
        "type-builtin-literals": {
            "name": "support.type.builtin.ts",
            "match": "\\b(?<![$])(true|false)\\b"
        },
        "annotations": {
            "patterns": [
                {
                    "name": "comment.block.documentation.fpp",
                    "match": "[@][<]?[^\n]*"
                },
                {
                    "name": "comment.line.fpp",
                    "match": "[#][^\n]*"
                }
            ]
        },
        "tripleString": {
            "name": "string.quoted.triple.fpp",
            "begin": "\"\"\"",
            "end": "\"\"\"",
            "patterns": [
                {
                    "name": "constant.character.escape.fpp",
                    "match": "\\\\."
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.fpp",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.fpp",
                    "match": "\\\\."
                }
            ]
        },
        "punctuation-comma": {
            "name": "punctuation.separator.comma.ts",
            "match": ","
        },
        "punctuation-semicolon": {
            "name": "punctuation.terminator.statement.ts",
            "match": ";"
        },
        "punctuation-accessor": {
            "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.ts"
                },
                "2": {
                    "name": "punctuation.accessor.optional.ts"
                }
            }
        },
        "string-character-escape": {
            "name": "constant.character.escape.ts",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        },
        "numeric-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.ts",
                    "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.ts"
                        }
                    }
                },
                {
                    "name": "constant.numeric.binary.ts",
                    "match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.ts"
                        }
                    }
                },
                {
                    "name": "constant.numeric.octal.ts",
                    "match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.ts"
                        }
                    }
                },
                {
                    "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.ts"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period.ts"
                        },
                        "2": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "3": {
                            "name": "meta.delimiter.decimal.period.ts"
                        },
                        "4": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "5": {
                            "name": "meta.delimiter.decimal.period.ts"
                        },
                        "6": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "7": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "8": {
                            "name": "meta.delimiter.decimal.period.ts"
                        },
                        "9": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "10": {
                            "name": "meta.delimiter.decimal.period.ts"
                        },
                        "11": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "12": {
                            "name": "meta.delimiter.decimal.period.ts"
                        },
                        "13": {
                            "name": "storage.type.numeric.bigint.ts"
                        },
                        "14": {
                            "name": "storage.type.numeric.bigint.ts"
                        }
                    }
                }
            ]
        }
    },
    "scopeName": "source.fpp"
}